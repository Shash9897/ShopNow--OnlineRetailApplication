package org.example.dbms;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.sql.*;

public class App extends Application {

    private Stage primaryStage;

    private Scene initialScene;
    private Scene loginScene;
    private Scene signUpScene;

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        this.primaryStage.setTitle("Sign Up");

        // Create initial scene
        createInitialScene();
        // Create Login Scene
        createLoginScene();

        // Create Sign Up Scene
        createSignUpScene();

        // Initially show the login scene
        primaryStage.setScene(initialScene);
        primaryStage.show();
    }

    private void createInitialScene() {
        GridPane initialGrid = new GridPane();
        initialGrid.setPadding(new Insets(20, 20, 20, 20));
        initialGrid.setVgap(10);
        initialGrid.setHgap(10);

        Button loginButton = new Button("Login");
        loginButton.setOnAction(e -> primaryStage.setScene(loginScene));
        GridPane.setConstraints(loginButton, 0, 0);

        Button signUpButton = new Button("Sign Up");
        signUpButton.setOnAction(e -> primaryStage.setScene(signUpScene));
        GridPane.setConstraints(signUpButton, 1, 0);

        initialGrid.getChildren().addAll(loginButton, signUpButton);


        initialScene = new Scene(initialGrid, 300, 200);
    }

    private void createLoginScene() {
        GridPane loginGrid = new GridPane();
        loginGrid.setPadding(new Insets(20, 20, 20, 20));
        loginGrid.setVgap(10);
        loginGrid.setHgap(10);

        Label loginLabel = new Label("Login");
        GridPane.setConstraints(loginLabel, 0, 0);

        TextField loginUserID = new TextField();
        loginUserID.setPromptText("UserID");
        GridPane.setConstraints(loginUserID, 0, 1);

        TextField loginPassword = new TextField();
        loginPassword.setPromptText("Password");
        GridPane.setConstraints(loginPassword, 0, 2);

        Label errorLabel = new Label(""); // Initially empty
        errorLabel.setStyle("-fx-text-fill: red;"); // Set text color to red
        GridPane.setConstraints(errorLabel, 0, 3);

        Button loginButton = new Button("Login");
        GridPane.setConstraints(loginButton, 1, 2);
        loginButton.setOnAction(e -> {
            String userID = loginUserID.getText();
            String password = loginPassword.getText();
            if (validateLogin(userID, password)) {
                // Redirect to success screen or perform other actions
                System.out.println("Login successful");
            } else {
                // Display error message and clear fields
                errorLabel.setText("Invalid credentials. Please try again.");
                loginUserID.clear();
                loginPassword.clear();
            }
        });

        Button backButton = new Button("Back");
        GridPane.setConstraints(backButton, 1, 3);
        backButton.setOnAction(e -> primaryStage.setScene(initialScene));

        loginGrid.getChildren().addAll(loginLabel, loginUserID, loginPassword, errorLabel, loginButton, backButton);
        loginScene = new Scene(loginGrid, 300, 200);
    }


    private boolean validateLogin(String userID, String password) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/PROJECT", "root", "Shashwat@9897");
             PreparedStatement statement = connection.prepareStatement("SELECT * FROM USER WHERE USER_ID = ? AND PASSWORD = ?")) {
            // Set parameters using correct index
            statement.setString(1, userID);
            statement.setString(2, password);

            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next(); // If resultSet.next() returns true, it means the user exists in the database
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void createSignUpScene() {
        GridPane signUpGrid = new GridPane();
        signUpGrid.setPadding(new Insets(20, 20, 20, 20));
        signUpGrid.setVgap(10);
        signUpGrid.setHgap(10);

        Label signUpLabel = new Label("Sign Up");
        GridPane.setConstraints(signUpLabel, 0, 0);

        TextField signUpName = new TextField();
        signUpName.setPromptText("Name");
        GridPane.setConstraints(signUpName, 0, 1);

        TextField signUpEmail = new TextField();
        signUpEmail.setPromptText("Email");
        GridPane.setConstraints(signUpEmail, 0, 2);

        TextField signUpAddress = new TextField();
        signUpAddress.setPromptText("Address");
        GridPane.setConstraints(signUpAddress, 0, 3);

        TextField signUpContactNumber = new TextField();
        signUpContactNumber.setPromptText("Contact Number");
        GridPane.setConstraints(signUpContactNumber, 0, 4);

        TextField signUpPassword = new TextField();
        signUpPassword.setPromptText("Password");
        GridPane.setConstraints(signUpPassword, 0, 5);

        Button signUpButton = new Button("Sign Up");
        GridPane.setConstraints(signUpButton, 1, 5);
        signUpButton.setOnAction(e -> {
            String name = signUpName.getText();
            String email = signUpEmail.getText();
            String address = signUpAddress.getText();
            String contactNumber = signUpContactNumber.getText();
            String password = signUpPassword.getText();
            if (!validateEmail(email)) {
                System.out.println("Invalid email address.");
                return;
            }
            if (validateUser(email, password)) {
                System.out.println("User with this email already exists.");
                return;
            }
            int newUserId = generateNewUserId();
            if (addUser(newUserId, name, email, address, contactNumber, password)) {
                System.out.println("User successfully added with ID: " + newUserId);
            } else {
                System.out.println("Failed to add user.");
            }
        });

        Button backButton = new Button("Back");
        GridPane.setConstraints(backButton, 1, 6);
        backButton.setOnAction(e -> primaryStage.setScene(initialScene));

        signUpGrid.getChildren().addAll(signUpLabel, signUpName, signUpEmail, signUpAddress, signUpContactNumber, signUpPassword, signUpButton, backButton);
        signUpScene = new Scene(signUpGrid, 400, 300);
    }

    private boolean validateEmail(String email) {
        // Implement email validation logic (e.g., regex validation)
        // For simplicity, this method returns true if the email is not empty
        return !email.isEmpty();
    }

    private boolean validateUser(String email, String password) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/PROJECT", "root", "Shashwat@9897");
             PreparedStatement statement = connection.prepareStatement("SELECT * FROM USER WHERE EMAIL = ?")) {
            statement.setString(1, email);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next(); // Return true if a user with the given email and password exists in the database
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }


    private synchronized int getNextUserId() {
        // Retrieve the last assigned user ID from the database or another persistent storage
        int lastAssignedUserId = getLastAssignedUserIdFromDatabase();

        // Increment the last assigned user ID and return it
        return ++lastAssignedUserId;
    }

    private int getLastAssignedUserIdFromDatabase() {
        int maxUserId = 0;
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            // Establish a connection to the database
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/PROJECT", "root", "Shashwat@9897");

            // Prepare the SQL query to retrieve the maximum user ID
            String query = "SELECT MAX(USER_ID) AS max_user_id FROM USER";
            statement = connection.prepareStatement(query);

            // Execute the query
            resultSet = statement.executeQuery();

            // Retrieve the maximum user ID from the result set
            if (resultSet.next()) {
                maxUserId = resultSet.getInt("max_user_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close the resources in the reverse order of their creation to avoid resource leaks
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return maxUserId;
    }

    private int generateNewUserId() {
        // Generate a new user ID by calling the synchronized getNextUserId() method
        return getNextUserId();
    }

    private boolean addUser(int userId, String name, String email, String address, String contactNumber, String password) {
        // SQL query to insert a new user into the USER table
        String insertQuery = "INSERT INTO USER (USER_ID, NAME, EMAIL, ADDRESS, CONTACT_NUMBER, PASSWORD) VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/PROJECT", "root", "Shashwat@9897");
             PreparedStatement statement = connection.prepareStatement(insertQuery)) {
            // Set the parameters for the PreparedStatement
            statement.setInt(1, userId);
            statement.setString(2, name);
            statement.setString(3, email);
            statement.setString(4, address);
            statement.setString(5, contactNumber);
            statement.setString(6, password);

            // Execute the INSERT query
            int rowsAffected = statement.executeUpdate();

            // Check if the INSERT operation was successful
            if (rowsAffected > 0) {
                System.out.println("User added successfully.");
                return true;
            } else {
                System.out.println("Failed to add user.");
                return false;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }


    public static void main(String[] args) {
        launch(args);
    }
}
